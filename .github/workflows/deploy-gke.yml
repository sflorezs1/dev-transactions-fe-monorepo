# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: static-site
  GAR: us-central1-docker.pkg.dev/sound-machine-399502/devtrasactions-artifacts

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v2.1.2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    - name: Check config
      run: cat gha-creds-*.json

    - name: Log in to Google Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ GAR }}
        username: _json_key
        password: ${{ secrets.GCP_CREDENTIALS.private_key }} 
   
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

   # Build and Publish Docker Images
    - name: Build and Publish
      run: |
        for app in $(ls apps/); do
          echo "Generating Dockerfile for: $app"
          dockerfile_path="apps/$app/Dockerfile"  # Path to Dockerfile
          echo '# Use a lightweight Node.js image for production' > $dockerfile_path
          echo '# Copy the built application from the builder stage' >> $dockerfile_path
          echo "COPY --from=builder /app/dist/apps/$app /usr/share/nginx/html" >> $dockerfile_path 
          echo "EXPOSE 80" >> $dockerfile_path
          echo 'CMD ["nginx", "-g", "daemon off;"]' >> $dockerfile_path

          echo "Building and pushing image for: $app"
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$app:$GITHUB_SHA" \ 
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
           apps/$app  # Build from the microservice subdirectory
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$app:$GITHUB_SHA"
        done
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        for app in $(ls apps/); do
          echo "Deploying $app"
          # Update image tag in deployment manifests
          ./kustomize edit set image LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$app:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$app:$GITHUB_SHA 
          ./kustomize build apps/$app | kubectl apply -f -
          kubectl rollout status deployment/$app  # Assuming deployments named after microservices 
        done 
