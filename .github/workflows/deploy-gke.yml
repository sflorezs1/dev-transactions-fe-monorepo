# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize
name: Build and Deploy to GKE
on:
  push:
    branches: [ "main" ]
env:
  PROJECT_ID: sound-machine-399502
  GAR_LOCATION: us-central1
  GKE_CLUSTER: devtrasctions-cluster-fe
  GKE_ZONE: us-central1-c
  GKE_REGION: us-central1
  DEPLOYMENT_NAME: gke-test
  REPOSITORY: devtrasactions-artifacts
  IMAGE: static-site
  GAR: us-central1-docker.pkg.dev/sound-machine-399502/devtrasactions-artifacts
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    # Alternative option - authentication via credentials json test
    - id: 'auth'
      uses: 'google-github-actions/auth@v2.1.2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    - name: Log in to Google Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.GAR }}
        username: _json_key
        password: ${{ secrets.GCP_CREDENTIALS }} 
   
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2.1.0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_REGION }}
    - name: Install
      run: |
        npm ci
        
    - name: Build apps
      run: |
        npx nx run-many --target=build --all
    - name: List build artifacts
      run: |
        ls -la ./dist/apps/
        
   # Build and Publish Docker Images
    - name: Build and Publish
      run: |
        for app in $(ls apps/); do
          echo "Generating Dockerfile for: $app"
          dockerfile_path="apps/$app/Dockerfile"  # Path to Dockerfile
          echo 'FROM nginx:alpine' >> $dockerfile_path
          echo "COPY ./dist/apps/$app /usr/share/nginx/html" >> $dockerfile_path 
          echo "EXPOSE 80" >> $dockerfile_path
          echo 'CMD ["nginx", "-g", "daemon off;"]' >> $dockerfile_path
          echo "Building and pushing image for: $app"
          docker build --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$app:$GITHUB_SHA" --build-arg GITHUB_SHA="$GITHUB_SHA" --build-arg GITHUB_REF="$GITHUB_REF" --file apps/$app/Dockerfile .
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$app:$GITHUB_SHA"
        done
  
    - name: Generate Kubernetes Deployment Manifests
      run: |
        for app in $(ls apps/); do
          mkdir -p apps/$app/k8s
          {
            echo "apiVersion: apps/v1"
            echo "kind: Deployment"
            echo "metadata:"
            echo "  name: $app-deployment"
            echo "  labels:"
            echo "    app: $app"
            echo "spec:"
            echo "  replicas: 3"
            echo "  selector:"
            echo "    matchLabels:"
            echo "      app: $app"
            echo "  template:"
            echo "    metadata:"
            echo "      labels:"
            echo "        app: $app"
            echo "    spec:"
            echo "      serviceAccountName: terraform-user"
            echo "      containers:"
            echo "      - name: $app-container"
            echo "        image: IMAGE_URL_PLACEHOLDER  # This placeholder will be replaced"
            echo "        ports:"
            echo "        - containerPort: 80" 
          } >> apps/$app/k8s/deployment.yaml
        done
    - name: Verify manifiest
      run: |
        for app in $(ls apps); do
          ls apps/$app/k8s
        done
    - name: Deploy
      run: |
        for app in $(ls apps/); do
          # Replace the image URL placeholder with the actual image URL constructed from the build and publish steps
          image_url="us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/$app:${{ github.sha }}"
          echo "IMAGE_URL=$image_url"
          sed -i "s|IMAGE_URL_PLACEHOLDER|$image_url|g" apps/$app/k8s/deployment.yaml
          
          # Apply the Kubernetes manifests
          kubectl apply -f apps/$app/k8s/deployment.yaml
          # Wait for the deployment to be fully rolled out
          kubectl rollout status deployment/$app-deployment
        done
